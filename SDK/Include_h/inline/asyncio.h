#ifndef INLINE_ASYNCIO_H
#define INLINE_ASYNCIO_H

/*
** GCC format inline files.
**
**
** Generated by LibDescConverter from an sfd file
*/

/* "asyncio.library" */
#define OpenAsync(fileName, mode, bufferSize)    \
({  \
	register void *b __asm("a6") = AsyncIOBase;  \
	register STRPTR p0 __asm("a0") = (fileName);   \
	register ULONG p1 __asm("d0") = (mode);   \
	register LONG p2 __asm("d1") = (bufferSize);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-30:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define OpenAsyncFromFH(handle, mode, bufferSize)    \
({  \
	register void *b __asm("a6") = AsyncIOBase;  \
	register BPTR p0 __asm("a0") = (handle);   \
	register ULONG p1 __asm("d0") = (mode);   \
	register LONG p2 __asm("d1") = (bufferSize);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-36:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define CloseAsync(file)    \
({  \
	register void *b __asm("a6") = AsyncIOBase;  \
	register struct AsyncFile *p0 __asm("a0") = (file);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-42:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define SeekAsync(file, position, mode)    \
({  \
	register void *b __asm("a6") = AsyncIOBase;  \
	register struct AsyncFile *p0 __asm("a0") = (file);   \
	register LONG p1 __asm("d0") = (position);   \
	register LONG p2 __asm("d1") = (mode);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-48:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define ReadAsync(file, buffer, bytes)    \
({  \
	register void *b __asm("a6") = AsyncIOBase;  \
	register struct AsyncFile *p0 __asm("a0") = (file);   \
	register APTR p1 __asm("a1") = (buffer);   \
	register LONG p2 __asm("d0") = (bytes);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-54:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define WriteAsync(file, buffer, bytes)    \
({  \
	register void *b __asm("a6") = AsyncIOBase;  \
	register struct AsyncFile *p0 __asm("a0") = (file);   \
	register APTR p1 __asm("a1") = (buffer);   \
	register LONG p2 __asm("d0") = (bytes);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-60:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define ReadCharAsync(file)    \
({  \
	register void *b __asm("a6") = AsyncIOBase;  \
	register struct AsyncFile *p0 __asm("a0") = (file);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-66:W);" : "+r"(b), "=r"(r) : "r"(p0) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define WriteCharAsync(file, ch)    \
({  \
	register void *b __asm("a6") = AsyncIOBase;  \
	register struct AsyncFile *p0 __asm("a0") = (file);   \
	register ULONG p1 __asm("d0") = (ch);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-72:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define ReadLineAsync(file, buf, bytes)    \
({  \
	register void *b __asm("a6") = AsyncIOBase;  \
	register struct AsyncFile *p0 __asm("a0") = (file);   \
	register STRPTR p1 __asm("a1") = (buf);   \
	register LONG p2 __asm("d0") = (bytes);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-78:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define WriteLineAsync(file, buf)    \
({  \
	register void *b __asm("a6") = AsyncIOBase;  \
	register struct AsyncFile *p0 __asm("a0") = (file);   \
	register STRPTR p1 __asm("a1") = (buf);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-84:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define FGetsAsync(file, buf, bytes)    \
({  \
	register void *b __asm("a6") = AsyncIOBase;  \
	register struct AsyncFile *p0 __asm("a0") = (file);   \
	register STRPTR p1 __asm("a1") = (buf);   \
	register LONG p2 __asm("d0") = (bytes);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-90:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define FGetsLenAsync(file, buf, bytes, length)    \
({  \
	register void *b __asm("a6") = AsyncIOBase;  \
	register struct AsyncFile *p0 __asm("a0") = (file);   \
	register STRPTR p1 __asm("a1") = (buf);   \
	register LONG p2 __asm("d0") = (bytes);   \
	register LONG *p3 __asm("a2") = (length);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-96:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2), "r"(p3) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})

#define PeekAsync(file, buffer, bytes)    \
({  \
	register void *b __asm("a6") = AsyncIOBase;  \
	register struct AsyncFile *p0 __asm("a0") = (file);   \
	register APTR p1 __asm("a1") = (buffer);   \
	register LONG p2 __asm("d0") = (bytes);   \
	register APTR r __asm("d0");   \
	__asm volatile ("jsr a6@(-102:W);" : "+r"(b), "=r"(r) : "r"(p0), "r"(p1), "r"(p2) : "d0", "d1", "a0", "a1", "fp0", "fp1", "cc", "memory");    \
	r;   \
})


#endif /* INLINE_ASYNCIO_H */
